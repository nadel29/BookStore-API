@page "/books/edit/{Id}"
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository _bookRepo
@inject IAuthorRepository _authorRepo
@inject IFileUpload _fileUpload

@inject NavigationManager _navManager

@using System.IO

<h3 class="card-title">Edit Book</h3>
<hr />
<br />


@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please try again."></ErrorMessage>
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Book Details."></LoadingMessage>
}
else
{
    <EditForm Model="Model" OnValidSubmit="UpdateBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="title">Title</label>
            <InputText Id="title" class="form-control" @bind-Value="Model.Title" />
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText Id="isbn" class="form-control" @bind-Value="Model.ISBN" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber Id="price" class="form-control" @bind-Value="Model.Price" />
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Model.AuthorId" Id="author" class="form-control">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.Firstname @author.Lastname</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="summary">Summary</label>
            <InputTextArea Id="summary" class="form-control" @bind-Value="Model.Summary" />
        </div>
        <div class="form-group">
            <label for="bookcover">Book Cover Photo</label>
            <InputFile OnChange="HandleFileSelection" />
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Please remove the invalid file type and select as new image, or leave this field blank."></ErrorMessage>
            }

            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height:100px;width:100px" />
            }
        </div>

        <button type="submit" class="btn btn-primary">
            <span class="oi oi-pencil"></span>
            Submit Changes
        </button>

        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Back to List
        </button>
    </EditForm>
}

@code {

    [Parameter]
    public string Id { get; set; }

    private MemoryStream msFile;
    private IList<Author> Authors;
    private IFileListEntry file;
    private bool isSuccess = true;
    private bool isInvalidFileType = false;
    private bool isFileChanged = false;
    private string imageDataURL;

    public Book Model = new Book();
    protected override async Task OnInitializedAsync()
    {
        Model = await _bookRepo.Get(Endpoints.BooksEndpoint, Convert.ToInt32(Id));
        Authors = await _authorRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task UpdateBook()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                //Remove old picture
                _fileUpload.RemoveFile(picName);

                _fileUpload.UploadFile(file, msFile, picName);

                Model.Image = picName;


            }
            else if(isFileChanged && file ==  null)
            {
                //Remove old picture
                _fileUpload.RemoveFile(Model.Image);
                Model.Image = string.Empty;
            }

            isSuccess = await _bookRepo.Update(Endpoints.BooksEndpoint, Model, Convert.ToInt32(Id));
            if (isSuccess)
            {
                BackToList();
            }

        }

    }
    private async Task HandleFileSelection(IFileListEntry[] files)
    {
        //This temporarily loads whatever image we uploaded into memory to display it for preview
        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                msFile = new MemoryStream();
                await file.Data.CopyToAsync(msFile);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(msFile.ToArray());
                imageDataURL = String.Format("data:image/png;base64,{0}", imageBase64Data);
                isInvalidFileType = false;
            }
            else
            {
                isInvalidFileType = true;
                imageDataURL = String.Empty;
            }
        }
        else
        {
            isInvalidFileType = false;
        }
    }


    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
